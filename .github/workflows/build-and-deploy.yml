name: Create and publish a Docker image

on:
  push:
    branches: [ 'master', 'feature/**', 'release' ]
    paths-ignore:
      - 'deploy/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_DEFAULT_REGION: eu-central-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  K8S_CLUSTER_NAME: eks-euc-dev
  KUBECONFIG: "/tmp/eks-config-eks-euc-dev.json"

jobs:
  notify:
    name: Notify on Slack
    if: always()
    runs-on: ubuntu-latest
    needs: [build-and-push-image]
    steps:
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: ${{ needs.build-and-push-image.outputs.job-status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ needs.build-and-push-image.outputs.job-status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.9 ]
    permissions:
      contents: read
      packages: write
    outputs:
      job-status: ${{ job.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      # return zero exit code, just to collect recommendations from linters
      - name: Run pylint & flake8
        run: |
          pipenv run pylint --output-format=parseable --reports=no src/ --exit-zero
          pipenv run flake8 --exit-zero src/ tests

      - name: Run unit tests
        run: |
          pipenv run scripts/run_tests.sh

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: "."
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Configure AWS Credentials
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Export kubeconfig from eks
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name ${K8S_CLUSTER_NAME} --kubeconfig /tmp/eks-config-${K8S_CLUSTER_NAME}.json

      - uses: azure/setup-helm@v1
        with:
          version: 'latest' # default is latest stable
        id: install

      - name: Deploy app
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          helm upgrade --install rates-service deploy/app-chart
